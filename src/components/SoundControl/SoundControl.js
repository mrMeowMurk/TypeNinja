import React, { useState, useEffect } from 'react';
import { soundManager, SOUND_THEMES } from '../../sounds';
import './SoundControl.css';

const SoundControl = () => {
  const [soundState, setSoundState] = useState(soundManager.getState());
  const [isExpanded, setIsExpanded] = useState(false);

  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    setSoundState(soundManager.getState());
  }, []);

  const handleToggleSound = () => {
    const isEnabled = soundManager.toggle();
    setSoundState(prev => ({ ...prev, isEnabled }));
  };

  const handleVolumeChange = (e) => {
    const volume = parseFloat(e.target.value);
    soundManager.setVolume(volume);
    setSoundState(prev => ({ ...prev, volume }));
  };

  const handleThemeChange = (theme) => {
    soundManager.loadTheme(theme);
    setSoundState(prev => ({ ...prev, currentTheme: theme }));
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫
    soundManager.play('keyPress');
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    setIsExpanded(false);
  };

  return (
    <div className={`sound-control ${isExpanded ? 'expanded' : 'collapsed'}`}>
      <div className="sound-control__header">
        <button 
          className={`sound-toggle ${soundState.isEnabled ? 'active' : ''}`}
          onClick={handleToggleSound}
          aria-label="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫"
        >
          {soundState.isEnabled ? 'üîä' : 'üîá'}
        </button>
        {soundState.isEnabled && (
          <>
            <input
              type="range"
              min="0"
              max="1"
              step="0.1"
              value={soundState.volume}
              onChange={handleVolumeChange}
              className="volume-slider"
              aria-label="–ì—Ä–æ–º–∫–æ—Å—Ç—å"
            />
            <button 
              className="expand-toggle"
              onClick={() => setIsExpanded(!isExpanded)}
              aria-label={isExpanded ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}
            >
              {isExpanded ? '‚ñº' : '‚ñ∂'}
            </button>
          </>
        )}
      </div>
      
      {soundState.isEnabled && isExpanded && (
        <div className="sound-themes">
          {Object.entries(SOUND_THEMES).map(([themeKey, theme]) => (
            <button
              key={themeKey}
              className={`theme-button ${soundState.currentTheme === themeKey ? 'active' : ''}`}
              onClick={() => handleThemeChange(themeKey)}
            >
              {theme.name}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default SoundControl; 